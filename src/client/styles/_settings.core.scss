$font-family: 'Roboto', sans-serif;

$global-font-size:    16px !default;
$global-line-height:  24px !default;

$global-spacing-unit: round($global-line-height) !default;

$global-spacing-unit-factor-tiny:   0.25 !default;
$global-spacing-unit-factor-small:  0.5  !default;
$global-spacing-unit-factor-large:  2    !default;
$global-spacing-unit-factor-huge:   4    !default;

$fa-font-path: "../assets/fonts";

$global-font-color: #394A59;

// Grid
$varian-fractions: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16;
$mq-breakpoints: (
    // mobile:  320px,
    tablet:  740px,
    desktop: 980px,
    wide:    1300px
) !default;



// Check that the chosen font rules are pixel numbers.

@each $_font-globals in
      $global-font-size
      $global-line-height {

  @if (type-of($_font-globals) == number) {

    @if (unit($_font-globals) != "px") {
      @error "`#{$_font-globals}` needs to be a pixel value.";
    }

  } @else {
    @error "`#{$_font-globals}` needs to be a number.";
  }

}


// Check that the chosen size factors are unitless numbers.

@each $_spacing-unit in
      $global-spacing-unit-factor-tiny
      $global-spacing-unit-factor-small
      $global-spacing-unit-factor-large
      $global-spacing-unit-factor-huge {

  @if (type-of($_spacing-unit) == number) {

    @if (unitless($_spacing-unit) == false) {
      @error "`#{$_spacing-unit}` needs to be unitless.";
    }

  } @else {
    @error "`#{$_spacing-unit}` needs to be a number.";
  }

}


// Private/framework-only reassignment. Do not alter anything below.

$global-spacing-unit-tiny:  round($global-spacing-unit * $global-spacing-unit-factor-tiny);
$global-spacing-unit-small: round($global-spacing-unit * $global-spacing-unit-factor-small);
$global-spacing-unit-large: round($global-spacing-unit * $global-spacing-unit-factor-large);
$global-spacing-unit-huge:  round($global-spacing-unit * $global-spacing-unit-factor-huge);


